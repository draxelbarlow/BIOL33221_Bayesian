plot
df1 <- enframe(rnorm(10000, 10, 1))
df2 <- enframe(rnorm(10000, 10, 4))
df1$distribution <- "d1"
df2$distribution <- "d2"
two_dist <- rbind(df1, df2)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
plot
library(tidyverse)
df1 <- enframe(rnorm(10000, 10, 1))
df2 <- enframe(rnorm(10000, 10, 4))
df1$distribution <- "d1"
df2$distribution <- "d2"
two_dist <- rbind(df1, df2)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
plot
df1 <- enframe(rnorm(10000, 10, 3))
df2 <- enframe(rnorm(10000, 5, 2))
df3 <- enframe(rnorm(10000, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
plot
View(two_dist)
df1 <- enframe(rnorm(10000, 10, 3))
df2 <- enframe(rnorm(10000, 5, 2))
df3 <- enframe(rnorm(10000, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
plot
df1 <- enframe(rnorm(10000, 10, 3))
df2 <- enframe(rnorm(5000, 5, 2))
df3 <- enframe(rnorm(5000, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
plot
df1 <- enframe(rnorm(7000, 10, 3))
df2 <- enframe(rnorm(5000, 5, 2))
df3 <- enframe(rnorm(5000, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
plot
df1 <- enframe(rnorm(8000, 10, 3))
df2 <- enframe(rnorm(5000, 5, 2))
df3 <- enframe(rnorm(5000, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
plot
df1 <- enframe(rnorm(7500, 10, 3))
df2 <- enframe(rnorm(5000, 5, 2))
df3 <- enframe(rnorm(5000, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
plot
df1 <- enframe(rnorm(7500, 10, 3))
df2 <- enframe(rnorm(5000, 5, 2))
df3 <- enframe(rnorm(5000, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
# animate plot
anim <- plot +
transition_states(distribution,
transition_length = 1,
state_length = 1
) +
ease_aes('cubic-in-out')
anim
library(gganimate)
df1 <- enframe(rnorm(7500, 10, 3))
df2 <- enframe(rnorm(5000, 5, 2))
df3 <- enframe(rnorm(5000, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
# animate plot
anim <- plot +
transition_states(distribution,
transition_length = 1,
state_length = 1
) +
ease_aes('cubic-in-out')
anim
df1 <- enframe(rnorm(7500, 10, 3))
df2 <- enframe(rnorm(5000, 5, 2))
df3 <- enframe(rnorm(5000, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
# animate plot
anim <- plot +
transition_states(distribution,
transition_length = 10,
state_length = 10
) +
ease_aes('cubic-in-out')
anim
df1 <- enframe(rnorm(750, 10, 3))
df2 <- enframe(rnorm(500, 5, 2))
df3 <- enframe(rnorm(500, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
# animate plot
anim <- plot +
transition_states(distribution,
transition_length = 10,
state_length = 10
) +
ease_aes('cubic-in-out')
anim
df1 <- enframe(rnorm(750, 10, 3))
df2 <- enframe(rnorm(500, 5, 2))
df3 <- enframe(rnorm(500, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 40) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
# animate plot
anim <- plot +
transition_states(distribution,
transition_length = 1,
state_length = 1
) +
ease_aes('cubic-in-out')
anim
df1 <- enframe(rnorm(750, 10, 3))
df2 <- enframe(rnorm(500, 5, 2))
df3 <- enframe(rnorm(500, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x=value, fill=distribution), alpha = 0.75, position="identity", show.legend=TRUE, bins = 20) +
scale_fill_brewer(palette="Set2") +
geom_vline(aes(xintercept = mean(df1$value)), col="black", size=1) +
theme_bw(base_size = 20)
# animate plot
anim <- plot +
transition_states(distribution,
transition_length = 1,
state_length = 1
) +
ease_aes('cubic-in-out')
anim
df1 <- enframe(rnorm(750, 10, 3))
df2 <- enframe(rnorm(500, 5, 2))
df3 <- enframe(rnorm(500, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x = value), binwidth = 1, colour = "black", fill = "coral") +
theme_bw(base_size = 20)
# animate plot
anim <- plot +
transition_states(distribution,
transition_length = 1,
state_length = 1
) +
ease_aes('cubic-in-out')
anim
df1 <- enframe(rnorm(750, 10, 3))
df2 <- enframe(rnorm(500, 5, 2))
df3 <- enframe(rnorm(500, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x = value), binwidth = 1, colour = "black", fill = "coral") +
theme_bw(base_size = 20, axis.text.x = element_blank())
# animate plot
anim <- plot +
transition_states(distribution,
transition_length = 1,
state_length = 1
) +
ease_aes('cubic-in-out')
anim
df1 <- enframe(rnorm(750, 10, 3))
df2 <- enframe(rnorm(500, 5, 2))
df3 <- enframe(rnorm(500, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x = value), binwidth = 1, colour = "black", fill = "coral") +
theme(base_size = 20, axis.text.x = element_blank())
# animate plot
anim <- plot +
transition_states(distribution,
transition_length = 1,
state_length = 1
) +
ease_aes('cubic-in-out')
anim
df1 <- enframe(rnorm(750, 10, 3))
df2 <- enframe(rnorm(500, 5, 2))
df3 <- enframe(rnorm(500, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x = value), binwidth = 1, colour = "black", fill = "coral") +
theme_bw(base_size = 20) +
theme(axis.text = element_blank())
# animate plot
anim <- plot +
transition_states(distribution,
transition_length = 1,
state_length = 1
) +
ease_aes('cubic-in-out')
anim
df1 <- enframe(rnorm(750, 10, 3))
df2 <- enframe(rnorm(500, 5, 2))
df3 <- enframe(rnorm(500, 15, 2))
df1$distribution <- "d1"
df2$distribution <- "d2"
df3$distribution <- "d2"
two_dist <- rbind(df1, df2, df3)
plot <- ggplot(two_dist) +
geom_histogram(aes(x = value), binwidth = 1, colour = "black", fill = "coral") +
theme_bw(base_size = 20) +
theme(axis.text = element_blank()) +
labs(x="Phenotypic trait", y="fitness")
# animate plot
anim <- plot +
transition_states(distribution,
transition_length = 1,
state_length = 1
) +
ease_aes('cubic-in-out')
anim
library(tidyverse)
library(gganimate)
library(RColorBrewer)
library(knitr)
library(ape)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 1/(b - a)) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area",
fill = "green", alpha = 0.35) +
stat_function(fun = dunif, args = list(min = a, max = b)) +
labs(x = "\n u", y = "f(u) \n",
title = paste0("Uniform Distribution \n With Min = ", a, " & Max = ", b, " \n")) +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12)) +
geom_vline(xintercept = a, linetype = "dashed", colour = "red") +
geom_vline(xintercept = b, linetype = "dashed", colour = "red")
}
uniform_Plot(a=0, b=1)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 1/(b - a)) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area",
fill = "green", alpha = 0.35) +
stat_function(fun = dunif, args = list(min = a, max = b)) +
geom_vline(xintercept = a, linetype = "dashed", colour = "red") +
geom_vline(xintercept = b, linetype = "dashed", colour = "red")
}
uniform_Plot(a=0, b=1)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 1/(b - a)) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area",
fill = "green", alpha = 0.35) +
stat_function(fun = dunif, args = list(min = a, max = b)) +
}
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 1/(b - a)) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area",
fill = "green", alpha = 0.35) +
stat_function(fun = dunif, args = list(min = a, max = b))
}
uniform_Plot(a=0, b=1)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b))
}
uniform_Plot(a=0, b=1)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = 0.1), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b))
}
uniform_Plot(a=0, b=1)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b))
}
uniform_Plot(a=0, b=1)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b))
}
uniform_Plot(a=0, b=0.5)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b))
}
uniform_Plot(a=0, b=5)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b))
}
uniform_Plot(a=0, b=2)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
}
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b))
}
uniform_Plot(a=0, b=2)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b))
}
uniform_Plot(a=0, b=2) +
theme_bw(base_size = 25)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b))
geom_vline(xintercept = a) +
geom_vline(xintercept = b, linetype = "dashed", colour = "red")
}
uniform_Plot(a=0, b=2) +
theme_bw(base_size = 25)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b))
geom_vline(xintercept = a, linetype = "dashed", colour = "red") +
geom_vline(xintercept = b, linetype = "dashed", colour = "red")
}
uniform_Plot(a=0, b=2) +
theme_bw(base_size = 25)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b)) +
geom_vline(xintercept = a, linetype = "dashed", colour = "red") +
geom_vline(xintercept = b, linetype = "dashed", colour = "red")
}
uniform_Plot(a=0, b=2) +
theme_bw(base_size = 25)
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b)) +
}
uniform_Plot <- function(a, b){
xvals <- data.frame(x = c(a, b)) #Range for x-values
ggplot(data.frame(x = xvals), aes(x = x)) + xlim(c(a, b)) + ylim(0, 2) +
stat_function(fun = dunif, args = list(min = a, max = b), geom = "area", fill = "lightgreen") +
stat_function(fun = dunif, args = list(min = a, max = b))
}
uniform_Plot(a=0, b=2) +
theme_bw(base_size = 25) +
xlab("Substiutions/site/year") +
ylab("Probability")
my.mc <- read.table("data/prlr_burn.txt", header=TRUE)
setwd("~/Documents/work_x1_sync/teaching/BIOL33221_Bioinformatics/2020-2021/BIOL33221_Bayesian/BIOL33221_Bayesian_slides")
my.mc <- read.table("data/prlr_burn.txt", header=TRUE)
my.mc
plot(my.mc$state, my.mc$prlr.rate)
plot(my.mc$state, my.mc$prlr.rate, lty=1)
plot(my.mc$state, my.mc$prlr.rate, type="l")
my.mc <- read.table("data/prlr_burn.txt", header=TRUE)
plot(my.mc$state, my.mc$prlr.rate, type="l", col="blue", xlab="mcmc states", ylab="parameter value")
my.mc <- read.table("data/prlr_burn.txt", header=TRUE)
plot(my.mc$state, my.mc$prlr.rate, type="l", col="blue", xlab="mcmc states", ylab="parameter value")
my.conv <- read.table("data/prlr_burn_removed.txt", header=TRUE)
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
hist(my.mc$prlr.rate, col="blue", xlab="mcmc states", ylab="parameter value", breaks=10)
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
hist(my.mc$prlr.rate, col="blue", xlab="mcmc states", ylab="parameter value", breaks=10, xlim=c(0,0.1)
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
hist(my.mc$prlr.rate, col="blue", xlab="mcmc states", ylab="parameter value", breaks=10, xlim=c(0,0.1))
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
hist(my.mc$prlr.rate, col="blue", xlab="mcmc states", ylab="parameter value", breaks=30, xlim=c(0,0.1))
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
hist(my.mc$prlr.rate, col="blue", xlab="mcmc states", ylab="parameter value", breaks=30, xlim=c(0,0.1), main="", frame.plot=TRUE)
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
myhist <- hist(my.mc$prlr.rate, breaks=30)
plt(myhist, col="blue", xlab="mcmc states", ylab="parameter value", xlim=c(0,0.1))
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
myhist <- hist(my.mc$prlr.rate, breaks=30)
plot(myhist, col="blue", xlab="mcmc states", ylab="parameter value", xlim=c(0,0.1))
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
hist(my.mc$prlr.rate, col="blue", xlab="mcmc states", ylab="parameter value", breaks=30, xlim=c(0,0.1), main="")
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
hist(my.mc$prlr.rate, density=TRUE, col="blue", ylab="probability", xlab="parameter value", breaks=30, xlim=c(0,0.1), main="")
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
hist(my.mc$prlr.rate, density=TRUE, col="blue", ylab="probability", xlab="parameter value", breaks=30, xlim=c(0,0.1), main="")
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
hist(my.mc$prlr.rate, col="blue", ylab="probability", xlab="parameter value", breaks=30, xlim=c(0,0.1), main="")
my.conv <- read.table("data/mcmc_big_fin.txt", header=TRUE)
hist(my.mc$prlr.rate, col="blue", ylab="Sample frequency", xlab="parameter value", breaks=30, xlim=c(0,0.1), main="")
my.mc <- read.table("data/prlr_burn.txt", header=TRUE)
par(mar=c(4, 4, 1, 1))
plot(my.mc$state, my.mc$prlr.rate, type="l", col="blue", xlab="mcmc states", ylab="parameter value")
*** =right
